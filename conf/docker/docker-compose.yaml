# Full MCMP Services with SSL
# 인증서 발급 완료 후 전체 서비스 실행

x-default-health-check: &default-health-check
  interval: ${HEALTH_CHECK_INTERVAL:-30s}
  timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
  retries: ${HEALTH_CHECK_RETIES:-3}
  start_period: ${HEALTH_CHECK_START_PERIOD:-40s}

networks:
  mc-infra-connector-network:
  mc-infra-manager-network:  
  mcmp-network:

services:
##### MC-INFRA-CONNECTOR #########################################################################################################################

  mc-infra-connector:
    image: cloudbaristaorg/cb-spider:0.9.7
    pull_policy: if_not_present
    container_name: mc-infra-connector
    platform: linux/amd64
    env_file:
      - ./.env
      - ./.env.ports
    networks:
      - mc-infra-connector-network
      - mcmp-network
    ports:
      - target: 1024
        published: ${MC_INFRA_CONNECTOR_PORT:-1024}
        protocol: tcp
    depends_on:
      - mcmp-postgres
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./conf/mc-infra-connector/:/root/go/src/github.com/cloud-barista/cb-spider/conf/:ro
      - ./container-volume/mc-infra-connector/meta_db/:/root/go/src/github.com/cloud-barista/cb-spider/meta_db/
      - ./container-volume/mc-infra-connector/log/:/root/go/src/github.com/cloud-barista/cb-spider/log/
    environment:
      - PLUGIN_SW=OFF
      - SPIDER_LOG_LEVEL=error
      - SPIDER_HISCALL_LOG_LEVEL=error
    healthcheck: # for CB-Spider
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:1024/spider/readyz" ]
      <<: *default-health-check

##### MC-INFRA-MANAGER #########################################################################################################################

  mc-infra-manager:
    image: cloudbaristaorg/cb-tumblebug:0.9.18
    container_name: mc-infra-manager
    pull_policy: if_not_present
    platform: linux/amd64
    env_file:
      - ./.env
      - ./.env.ports
    networks:
      - mc-infra-connector-network
      - mc-infra-manager-network
      - mcmp-network
    ports:
      - target: 1323
        published: ${MC_INFRA_MANAGER_PORT:-1323}
        protocol: tcp
    depends_on: 
      - mc-infra-manager-etcd
      - mc-infra-connector
      - mcmp-postgres
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./conf/mc-infra-manager/:/app/conf/:ro
      - ./container-volume/mc-infra-manager/meta_db/:/app/meta_db/
      - ./container-volume/mc-infra-manager/log/:/app/log/
    environment:
      - TB_SPIDER_REST_URL=http://mc-infra-connector:1024/spider
      - TB_ETCD_ENDPOINTS=http://mc-infra-manager-etcd:2379
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:1323/tumblebug/readyz" ]
      <<: *default-health-check

  mc-infra-manager-etcd:
    image: gcr.io/etcd-development/etcd:v3.5.14
    container_name: mc-infra-manager-etcd
    env_file:
      - ./.env
      - ./.env.ports
    networks:
      - mc-infra-manager-network
    ports:
      - target: 2379
        published: ${MC_INFRA_MANAGER_ETCD_CLIENT_PORT:-2379}
        protocol: tcp
      - target: 2380
        published: ${MC_INFRA_MANAGER_ETCD_PEER_PORT:-2380}
        protocol: tcp
    volumes: 
      - ./container-volume/mc-infra-manager/etcd/data:/etcd-data
    entrypoint: /usr/local/bin/etcd
    command:
      - --name
      - s1
      - --data-dir
      - /etcd-data
      - --listen-client-urls
      - http://0.0.0.0:2379
      - --advertise-client-urls
      - http://0.0.0.0:2379
      - --listen-peer-urls
      - http://0.0.0.0:2380
      - --initial-advertise-peer-urls
      - http://0.0.0.0:2380
      - --initial-cluster
      - s1=http://0.0.0.0:2380
      - --initial-cluster-token
      - tkn
      - --initial-cluster-state
      - new
      - --log-level
      - info
      - --logger
      - zap
      - --log-outputs
      - stderr
      - --auth-token
      - simple
    healthcheck:
      test: [ "CMD", "etcdctl", "endpoint", "health", "--endpoints=http://localhost:2379"]
      <<: *default-health-check

##### MC-IAM-MANAGER #########################################################################################################################

  mc-iam-manager:
    container_name: mc-iam-manager
    image: mzccsta/mc-iam-manager:0.3.0-beta
    pull_policy: if_not_present
    platform: linux/amd64
    env_file:
      - ./.env
      - ./.env.ports
    networks:
      - mc-infra-manager-network
      - mcmp-network
    ports:
      - target: 5000
        published: ${MC_IAM_MANAGER_PORT:-5000}
        protocol: tcp
    depends_on:
      - mcmp-postgres
      - mc-iam-keycloak
    environment:
      DATABASE_URL: postgres://${MCMP_POSTGRES_USER}:${MCMP_POSTGRES_PASSWORD}@mcmp-postgres:5432/${IAM_DB_NAME}
      PORT: 5000
    env_file:
      - ./conf/mc-iam-manager/.env
    volumes:
      - ./tool/mcc:/app/tool/mcc
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:5000/readyz"]
      <<: *default-health-check
    

  mc-iam-keycloak:
    container_name: mc-iam-keycloak
    build:
      context: ./
      dockerfile: ./dockerfiles/Dockerfile.keycloak
    env_file:
      - ./.env
      - ./.env.ports
    networks:
      - mcmp-network
    ports:
      - target: 8080
        published: ${MC_IAM_KEYCLOAK_PORT:-8080}
        protocol: tcp
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://mcmp-postgres:5432/${KEYCLOAK_DB_NAME}
      KC_DB_USERNAME: ${MCMP_POSTGRES_USER}
      KC_DB_PASSWORD: ${MCMP_POSTGRES_PASSWORD}
      KC_HOSTNAME_PORT: 8080
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./conf/mc-iam-manager/realm-import.json:/opt/keycloak/data/import/realm-import.json
      - ./container-volume/mc-iam-manager/keycloak/data/:/opt/keycloak/data/
      - ./container-volume/mc-iam-manager/keycloak/conf/:/opt/keycloak/conf/
    env_file:
      - ./conf/mc-iam-manager/.env
    depends_on:
      - mcmp-postgres
    command: 
      - start-dev 
      - --import-realm 
      - --verbose 
      - --features=token-exchange
    healthcheck:
      test: ["CMD", "/app/tool/mcc", "rest", "get","http://localhost:8080"]
      <<: *default-health-check

##### MCMP-COMMON-SERVICES #########################################################################################################################

  mcmp-postgres:
    container_name: mcmp-postgres
    image: postgres:14-alpine
    pull_policy: if_not_present
    platform: linux/amd64
    env_file:
      - ./.env
      - ./.env.ports
    networks:
      - mcmp-network
    ports:
      - target: 5432
        published: ${MCMP_POSTGRES_PORT:-5432}
        protocol: tcp
    volumes:
      - ./container-volume/mcmp/postgres/postgres_data:/var/lib/postgresql/data
      - ./conf/mcmp-postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_DB: ${MCMP_POSTGRES_DB:-mcmp}
      POSTGRES_USER: ${MCMP_POSTGRES_USER:-mcmpadmin}
      POSTGRES_PASSWORD: ${MCMP_POSTGRES_PASSWORD:-mcmppassword}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MCMP_POSTGRES_USER:-mcmpadmin}"]
      <<: *default-health-check

  # 최종 nginx (SSL 인증서 적용)
  mcmp-nginx:
    container_name: mcmp-nginx
    build:
      context: ./
      dockerfile: ./dockerfiles/Dockerfile.nginx
    env_file:
      - ./.env
      - ./.env.ports
    ports:
      - "${MCMP_NGINX_HTTP_PORT:-80}:80"
      - "${MCMP_NGINX_HTTPS_PORT:-443}:443"
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME:-localhost}
    volumes:
      - ./container-volume/certs:/etc/nginx/certs:ro
      - ./container-volume/certbot/www:/var/www/certbot:ro
    depends_on:
      - mc-iam-keycloak
      - mc-iam-manager
    networks:
      - mcmp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3 